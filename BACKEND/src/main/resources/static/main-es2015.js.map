{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/_helper/jwt.interceptor.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/add-certificate/add-certificate.component.ts","./src/app/components/add-certificate/add-certificate.component.html","./src/app/components/add-selfsigned/add-selfsigned.component.ts","./src/app/components/add-selfsigned/add-selfsigned.component.html","./src/app/components/admin-home-page/admin-home-page.component.ts","./src/app/components/admin-home-page/admin-home-page.component.html","./src/app/components/all-certificates/all-certificates.component.ts","./src/app/components/all-certificates/all-certificates.component.html","./src/app/components/client-all-certificates/client-all-certificates.component.ts","./src/app/components/client-all-certificates/client-all-certificates.component.html","./src/app/components/client-home-page/client-home-page.component.ts","./src/app/components/client-home-page/client-home-page.component.html","./src/app/components/log-info-list/log-info-list.component.ts","./src/app/components/log-info-list/log-info-list.component.html","./src/app/components/login-component/login-component.component.ts","./src/app/components/login-component/login-component.component.html","./src/app/components/registration-admin/registration-admin.component.ts","./src/app/components/registration-admin/registration-admin.component.html","./src/app/components/registration/registration.component.ts","./src/app/components/registration/registration.component.html","./src/app/material-module.ts","./src/app/models/logModel.ts","./src/app/models/logType.ts","./src/app/services/allowed-routes.service.ts","./src/app/services/auth.service.ts","./src/app/services/certificate-service.service.ts","./src/app/services/log.service.ts","./src/app/services/user.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AuthService} from '../services/auth.service';\r\nimport {CertificateServiceService} from '../services/certificate-service.service';\r\n\r\n// Add class for intercepting http request to add jwt token in header\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthService,\r\n              private certificateService: CertificateServiceService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          'X-Auth-Token': token\r\n        }\r\n      });\r\n    }\r\n    return next.handle(request);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponentComponent } from './components/login-component/login-component.component';\r\nimport { AdminHomePageComponent } from './components/admin-home-page/admin-home-page.component';\r\nimport {AddCertificateComponent} from './components/add-certificate/add-certificate.component';\r\nimport {AddSelfsignedComponent} from './components/add-selfsigned/add-selfsigned.component';\r\nimport {AllCertificatesComponent} from './components/all-certificates/all-certificates.component';\r\nimport {ClientHomePageComponent} from './components/client-home-page/client-home-page.component';\r\nimport {ClientAllCertificatesComponent} from \"./components/client-all-certificates/client-all-certificates.component\";\r\nimport {RegistrationComponent} from \"./components/registration/registration.component\";\r\nimport {LogInfoListComponent} from \"./components/log-info-list/log-info-list.component\";\r\nimport {RegistrationAdminComponent} from \"./components/registration-admin/registration-admin.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'login',\r\n        component: LoginComponentComponent,\r\n      },\r\n      {\r\n        path: 'admin/home',\r\n        component: AdminHomePageComponent\r\n      },\r\n  {\r\n      path: 'admin/add-certificate',\r\n    component: AddCertificateComponent\r\n  },\r\n  {\r\n    path: 'admin/add-selfsigned',\r\n    component: AddSelfsignedComponent\r\n  },\r\n  {\r\n    path: 'admin/all-certificates',\r\n    component: AllCertificatesComponent\r\n  },\r\n  {\r\n    path: 'client/home',\r\n    component: ClientHomePageComponent\r\n  },\r\n  {\r\n    path: 'client/all-certificates',\r\n    component: ClientAllCertificatesComponent\r\n  }\r\n  ,\r\n  {\r\n    path: 'registration',\r\n    component: RegistrationComponent\r\n  },\r\n  {\r\n    path:'admin/logs',\r\n    component: LogInfoListComponent\r\n  },\r\n  {\r\n    path: 'registrationAdmin',\r\n    component: RegistrationAdminComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n  })\r\n  export class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { UserService } from './services/user.service';\r\nimport {AuthService} from \"./services/auth.service\";\r\nimport {AllowedRoutesService} from \"./services/allowed-routes.service\";\r\nimport * as jwt_decode from 'jwt-decode';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private breakpointObserver: BreakpointObserver,\r\n    private userService: UserService,\r\n    private authService: AuthService,\r\n    private allowedRoutes: AllowedRoutesService\r\n    ) {\r\n  }\r\n\r\n    isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n      .pipe(\r\n        map((result) => result.matches),\r\n        shareReplay()\r\n      );\r\n\r\n      public isNone() {\r\n          if (localStorage.getItem('token') === null || localStorage.getItem('token') === undefined) {\r\n            return true;\r\n        }return false;\r\n      }\r\n\r\n      public isAdmin() {\r\n        return this.authService.isAdmin();\r\n      }\r\n      public isUser(){\r\n        return this.authService.isUser();\r\n      }\r\n      public onLogout() {\r\n        this.authService.logout();\r\n      }\r\n\r\n}\r\n","<mat-sidenav-container class=\"sidenav-container\">\r\n    <mat-sidenav #drawer class=\"sidenav\" fixedInViewport [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\r\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\" [opened]=\"(isHandset$ | async) === true\">\r\n      <mat-toolbar>Menu</mat-toolbar>\r\n      <mat-nav-list *ngIf=\"isNone()\">\r\n        <a mat-list-item routerLink=\"/login\">Login</a>\r\n        <a mat-list-item routerLink=\"/registration\">Registration for user</a>\r\n        <a mat-list-item routerLink=\"/registrationAdmin\">Registration for admin</a>\r\n      </mat-nav-list>\r\n\r\n        <mat-nav-list *ngIf=\"isAdmin()\">\r\n          <a mat-list-item routerLink=\"/admin/add-certificate\">Add Certificate</a>\r\n          <a mat-list-item routerLink=\"/admin/add-selfsigned\">Add SelfSigned Certificate</a>\r\n          <a mat-list-item routerLink=\"/admin/all-certificates\">All Certificates</a>\r\n          <a mat-list-item routerLink=\"/admin/logs\">All Logs</a>\r\n          <a mat-list-item (click)=\"onLogout()\">Log out</a>\r\n        </mat-nav-list>\r\n      <mat-nav-list *ngIf=\"isUser()\">\r\n        <a mat-list-item routerLink=\"/client/all-certificates\">All Certificates</a>\r\n        <a mat-list-item (click)=\"onLogout()\">Log out</a>\r\n      </mat-nav-list>\r\n    </mat-sidenav>\r\n    <mat-sidenav-content>\r\n      <mat-toolbar>\r\n        <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\">\r\n          <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\r\n        </button>\r\n        <span>P I K</span>\r\n<!--        <span class=\"example-spacer\"></span>-->\r\n<!--        <span flex></span>-->\r\n<!--        <button  mat-flat-button color=\"primary\" role=\"button\" routerLink=\"/login\">-->\r\n<!--          <mat-icon>login</mat-icon>-->\r\n<!--          Login-->\r\n<!--        </button>-->\r\n<!--        <button mat-flat-button color=\"primary\" role=\"button\" routerLink=\"/registration\">-->\r\n<!--          <mat-icon>registration</mat-icon>-->\r\n<!--          Registration-->\r\n<!--        </button>-->\r\n\r\n        <span></span>\r\n      </mat-toolbar>\r\n      <!-- Add Content Here -->\r\n      <router-outlet></router-outlet>\r\n    </mat-sidenav-content>\r\n  </mat-sidenav-container>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule }         from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponentComponent } from './components/login-component/login-component.component';\r\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DemoMaterialModule } from './material-module';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AdminHomePageComponent } from './components/admin-home-page/admin-home-page.component';\r\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\r\nimport { AddCertificateComponent } from './components/add-certificate/add-certificate.component';\r\nimport { AddSelfsignedComponent } from './components/add-selfsigned/add-selfsigned.component';\r\nimport { AllCertificatesComponent } from './components/all-certificates/all-certificates.component';\r\nimport { ClientHomePageComponent } from './components/client-home-page/client-home-page.component';\r\nimport { ClientAllCertificatesComponent } from './components/client-all-certificates/client-all-certificates.component';\r\nimport { RegistrationComponent } from './components/registration/registration.component';\r\nimport {AuthService} from \"./services/auth.service\";\r\nimport {CertificateServiceService} from \"./services/certificate-service.service\";\r\nimport {JwtInterceptor} from \"./_helper/jwt.interceptor\";\nimport { LogInfoListComponent } from './components/log-info-list/log-info-list.component';\nimport { RegistrationAdminComponent } from './components/registration-admin/registration-admin.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponentComponent,\r\n    AdminHomePageComponent,\r\n    AddCertificateComponent,\r\n    AddSelfsignedComponent,\r\n    AllCertificatesComponent,\r\n    ClientHomePageComponent,\r\n    ClientAllCertificatesComponent,\r\n    RegistrationComponent,\r\n    LogInfoListComponent,\r\n    RegistrationAdminComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    NoopAnimationsModule,\r\n    DemoMaterialModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [\r\n    AuthService,\r\n    CertificateServiceService,\r\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {CertificateModel} from '../../models/certificateModel';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {CertificateServiceService} from '../../services/certificate-service.service';\r\nimport {CertificateDB} from '../../models/certificateDB';\r\nimport {UserService} from '../../services/user.service';\r\nimport {LogModel} from \"../../models/logModel\";\r\nimport {LogType} from \"../../models/logType\";\r\nimport {AuthService} from \"../../services/auth.service\";\r\nimport {LogService} from \"../../services/log.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-add-certificate',\r\n  templateUrl: './add-certificate.component.html',\r\n  styleUrls: ['./add-certificate.component.css']\r\n})\r\nexport class AddCertificateComponent implements OnInit {\r\n\r\n  model: CertificateModel = {\r\n    startDate: '',\r\n    endDate: '',\r\n    serialNumber: '',\r\n    name: '',\r\n    surname: '',\r\n    country: '',\r\n    organization: '',\r\n    organizationUnit: '',\r\n    email: '',\r\n    type: '',\r\n    alias: '',\r\n    issuerSerialNumber: '',\r\n  };\r\n  listOfPossibleIssuers: CertificateDB [];\r\n  constructor(private http: HttpClient ,\r\n              private certService: CertificateServiceService,\r\n              private userService: UserService,\r\n              private authService: AuthService,\r\n              private logService: LogService,\r\n              private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.certService.getAllPossibleIssuers().subscribe(\r\n      data => {\r\n        this.listOfPossibleIssuers = data;\r\n      },\r\n      error => {\r\n        console.log('Error occured', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  generateCertificate(): void {\r\n    const url = 'https://localhost:8443/api/certificate/generate';\r\n    this.http.post(url, this.model).subscribe(\r\n      res => {\r\n        const logModel= new LogModel(LogType.INFO, this.authService.getEmail(), 'Certificate created',4);\r\n        this.logService.addLog(logModel).subscribe();\r\n        this.router.navigate(['/admin/home']);\r\n        alert('Uspesno');\r\n      },\r\n      error => {\r\n        const logModel= new LogModel(LogType.ERROR, this.authService.getEmail(), 'Error creating certificate',5);\r\n        this.logService.addLog(logModel).subscribe();\r\n        alert('Error');\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","\r\n  <div class=\"row\">\r\n    <div class=\"offset-3\"></div>\r\n    <div class=\"col-md-6\">\r\n      <form name=\"certificateForm\" #f=\"ngForm\" (ngSubmit)=\"generateCertificate()\" novalidate class=\"feedback-form\">\r\n\r\n        <div class=\"form-group\">\r\n          <b>Choose type:</b><br><br>\r\n\r\n          <input type=\"radio\" id=\"intermediate\" name=\"type\" [(ngModel)]=\"model.type\" value=\"INTERMEDIATE\">\r\n          <label for=\"intermediate\" style=\"padding-right:20px;\">Intermediate</label>\r\n          <input type=\"radio\" id=\"client\" name=\"type\" [(ngModel)]=\"model.type\" value=\"CLIENT\">\r\n          <label for=\"client\">Client</label>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <h4><b>Choose issuer:</b></h4>\r\n          <select class=\"form-control\" [(ngModel)]=\"model.issuerSerialNumber\" name=\"issuerSerialNumber\">\r\n            <option  *ngFor=\" let issuer of listOfPossibleIssuers \" value=\"{{issuer.serialNumber}}\">{{issuer.subjectCommonName}}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\" >\r\n          <h4><b>Client data</b></h4>\r\n          <div class=\"form-group\">\r\n            <label>Name:</label>\r\n            <input type=\"text\"\r\n                   placeholder=\"Name\"\r\n                   class=\"form-control\" name=\"name\"\r\n                   pattern=\"[A-Za-z]\"\r\n                   [(ngModel)]=\"model.name\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\" >\r\n            <label>Surname:</label>\r\n            <input type=\"text\" name=\"surname\"\r\n                   placeholder=\"Surname\"\r\n                   class=\"form-control\"\r\n                   [(ngModel)]=\"model.surname\"\r\n            />\r\n          </div>\r\n          <label>Country:</label>\r\n          <input type=\"text\" name=\"country\"\r\n                 placeholder=\"Country\"\r\n                 class=\"form-control\"\r\n                 [(ngModel)]=\"model.country\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group\" >\r\n          <label>Organization:</label>\r\n          <input type=\"text\" name=\"organization\"\r\n                 placeholder=\"Organization\"\r\n                 class=\"form-control\"\r\n                 [(ngModel)]=\"model.organization\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>Organization unit:</label>\r\n          <input type=\"text\"\r\n                 placeholder=\"Organization unit\"\r\n                 class=\"form-control\" name=\"organizationUnit\"\r\n                 [(ngModel)]=\"model.organizationUnit\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>E-mail:</label>\r\n          <input type=\"email\"\r\n                 placeholder=\"example@example.com\"\r\n                 class=\"form-control\" name=\"email\"\r\n                 pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\r\n                 [(ngModel)]=\"model.email\"\r\n\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"startDate\">Start date:</label>\r\n          <input type=\"date\" id=\"startDate\"\r\n                 class=\"form-control\"\r\n                 name=\"startDate\"\r\n                 placeholder=\"Start date\"\r\n                 [(ngModel)]=\"model.startDate\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"endDate\">End date:</label>\r\n          <input type=\"date\" id=\"endDate\"\r\n                 class=\"form-control\"\r\n                 name=\"endDate\"\r\n                 placeholder=\"End date\"\r\n                 [(ngModel)]=\"model.endDate\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"submit\" class=\"btn btn-danger\" value=\"Generate certificate\" />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {CertificateModel} from '../../models/certificateModel';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Router} from '@angular/router';\r\nimport {UserService} from '../../services/user.service';\r\nimport {LogModel} from '../../models/logModel';\r\nimport {LogType} from '../../models/logType';\r\nimport {LogService} from '../../services/log.service';\r\nimport {AuthService} from '../../services/auth.service';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-add-selfsigned',\r\n  templateUrl: './add-selfsigned.component.html',\r\n  styleUrls: ['./add-selfsigned.component.css']\r\n})\r\nexport class AddSelfsignedComponent implements OnInit {\r\n  registerForm: FormGroup;\r\n  model: CertificateModel = {\r\n    startDate: '',\r\n    endDate: '',\r\n    serialNumber: '',\r\n    name: '',\r\n    surname: '',\r\n    country: '',\r\n    organization: '',\r\n    organizationUnit: '',\r\n    email: '',\r\n    type: '',\r\n    alias: '',\r\n    issuerSerialNumber: ''\r\n  };\r\n\r\n  constructor(private http: HttpClient, private router: Router, private userService: UserService,\r\n              private logService: LogService, private authService: AuthService,\r\n              private formBuilder: FormBuilder,) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n  }\r\n\r\n\r\n  generateSelfSignedCertificate() {\r\n    const url = 'https://localhost:8443/api/certificate/selfSigned/generate';\r\n    this.http.post(url, this.model).subscribe(\r\n      res => {\r\n        const logModel= new LogModel(LogType.INFO, this.authService.getEmail(), 'Self-signed created',3);\r\n        this.logService.addLog(logModel).subscribe();\r\n        this.router.navigate(['/admin/home']);\r\n        alert('Uspesno');\r\n      },\r\n      error => {\r\n        alert('Error');\r\n        const logModel= new LogModel(LogType.INFO, this.authService.getEmail(), 'Error creating self-signed certificate',6);\r\n        this.logService.addLog(logModel).subscribe();\r\n        console.log('Error');\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"offset-3\"></div>\r\n  <div class=\"col-md-6\">\r\n    <form name=\"certificateForm\" #f=\"ngForm\" (ngSubmit)=\"generateSelfSignedCertificate()\" novalidate class=\"feedback-form\">\r\n\r\n      <div class=\"form-group\">\r\n        <h4><b>Client data:</b></h4>\r\n        <div class=\"form-group\">\r\n          <label>Name:</label>\r\n          <input type=\"text\"\r\n                 placeholder=\"Name\"\r\n                 class=\"form-control\" name=\"name\"\r\n                 [(ngModel)]=\"model.name\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>Surname:</label>\r\n          <input type=\"text\" name=\"surname\"\r\n                 placeholder=\"Surname\"\r\n                 class=\"form-control\"\r\n                 [(ngModel)]=\"model.surname\"\r\n          />\r\n        </div>\r\n        <label>Country:</label>\r\n        <input type=\"text\" name=\"country\"\r\n               placeholder=\"Country\"\r\n               class=\"form-control\"\r\n               [(ngModel)]=\"model.country\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Organization:</label>\r\n        <input type=\"text\" name=\"organization\"\r\n               placeholder=\"Organization\"\r\n               class=\"form-control\"\r\n               [(ngModel)]=\"model.organization\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Organization unit:</label>\r\n        <input type=\"text\"\r\n               placeholder=\"Organization unit\"\r\n               class=\"form-control\" name=\"organizationUnit\"\r\n               [(ngModel)]=\"model.organizationUnit\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>E-mail:</label>\r\n        <input type=\"email\"\r\n               placeholder=\"example@example.com\"\r\n               class=\"form-control\" name=\"email\"\r\n               [(ngModel)]=\"model.email\"\r\n\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"startDate\">Start date:</label>\r\n        <input type=\"date\" id=\"startDate\"\r\n               class=\"form-control\"\r\n               name=\"startDate\"\r\n               placeholder=\"Start date\"\r\n               [(ngModel)]=\"model.startDate\"/>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"endDate\">End date:</label>\r\n        <input type=\"date\" id=\"endDate\"\r\n               class=\"form-control\"\r\n               name=\"endDate\"\r\n               placeholder=\"End date\"\r\n               [(ngModel)]=\"model.endDate\"/>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <input type=\"submit\" class=\"btn btn-danger\" value=\"Generate certificate\" />\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-admin-home-page',\r\n  templateUrl: './admin-home-page.component.html',\r\n  styleUrls: ['./admin-home-page.component.css']\r\n})\r\nexport class AdminHomePageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>admin-home-page works!</p>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {CertificateServiceService} from '../../services/certificate-service.service';\r\nimport {Certificate} from '../../models/certificate';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'app-all-certificates',\r\n  templateUrl: './all-certificates.component.html',\r\n  styleUrls: ['./all-certificates.component.css']\r\n})\r\nexport class AllCertificatesComponent implements OnInit {\r\n\r\n  // tslint:disable-next-line:max-line-length\r\n  displayedColumns: string[] = ['issName', 'subjName', 'serialNumber', 'startDate', 'endDate', 'download', 'revoke','check'];\r\n  myResponse: Certificate[];\r\n  dataSource: MatTableDataSource<Certificate>;\r\n  constructor(private certService: CertificateServiceService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.certService.getAllCertificates().subscribe(\r\n      data => {\r\n        this.myResponse = data;\r\n        console.log(data);\r\n        this.dataSource = new MatTableDataSource<Certificate>(this.myResponse);\r\n      },\r\n      error => {\r\n        console.log('Error occured', error);\r\n      }\r\n    );\r\n  }\r\n  revoke(certificate: Certificate) {\r\n    this.certService.revokeCertificate(certificate).subscribe(\r\n      res => {\r\n        alert('Revoked');\r\n      },\r\n      error => {\r\n        alert('Error');\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  isRevoked(cert: Certificate): boolean {\r\n    this.certService.checkCertificateStatus(cert).subscribe(\r\n      res =>{\r\n        alert('Already revoked');\r\n        return true;\r\n      }, error => {\r\n        alert('Error revoke');\r\n        return false;\r\n      }\r\n    );\r\n    return false;\r\n  }\r\n\r\n\r\n  download(certificate: Certificate) {\r\n    this.certService.downloadCertificate(certificate).subscribe(\r\n      res => {\r\n        alert('Downloaded');\r\n      },\r\n      error => {\r\n        alert('Error');\r\n      }\r\n    );\r\n  }\r\n}\r\n","<table mat-table\r\n       [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort>\r\n\r\n  <ng-container matColumnDef=\"issName\">\r\n    <th mat-header-cell *matHeaderCellDef> Issuer name: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.issName}} </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"subjName\">\r\n    <th mat-header-cell *matHeaderCellDef> Subject name: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.subjName}} </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"serialNumber\">\r\n    <th mat-header-cell *matHeaderCellDef> Serial number: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.serialNumber}} </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"startDate\">\r\n    <th mat-header-cell *matHeaderCellDef> Start date: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.startDate}} </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"endDate\">\r\n    <th mat-header-cell *matHeaderCellDef> End date: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.endDate}} </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"download\">\r\n    <th mat-header-cell *matHeaderCellDef> Download </th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"download(element)\">Download it</button>\r\n    </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"revoke\">\r\n    <th mat-header-cell *matHeaderCellDef> Revoke </th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"revoke(element)\">Revoke it</button>\r\n    </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"check\">\r\n    <th mat-header-cell *matHeaderCellDef>Check </th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"isRevoked(element)\">Revoke it</button>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n<mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n\r\n","import { Component, OnInit } from '@angular/core';\nimport {MatTableDataSource} from \"@angular/material/table\";\nimport {Certificate} from \"../../models/certificate\";\nimport {CertificateServiceService} from \"../../services/certificate-service.service\";\n\n@Component({\n  selector: 'app-client-all-certificates',\n  templateUrl: './client-all-certificates.component.html',\n  styleUrls: ['./client-all-certificates.component.css']\n})\nexport class ClientAllCertificatesComponent implements OnInit {\n\n  displayedColumns: string[] = ['issName', 'subjName', 'serialNumber', 'startDate', 'endDate'];\n  myResponse: Certificate[];\n  dataSource: MatTableDataSource<Certificate>;\n  constructor(private certService: CertificateServiceService) { }\n\n  ngOnInit(): void {\n    this.certService.getAllCertificates().subscribe(\n      data => {\n        this.myResponse = data;\n        console.log(data);\n        this.dataSource = new MatTableDataSource<Certificate>(this.myResponse);\n      },\n      error => {\n        console.log('Error occured', error);\n      }\n    );\n  }\n}\n","<table mat-table\n       [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort>\n\n  <ng-container matColumnDef=\"issName\">\n    <th mat-header-cell *matHeaderCellDef> Issuer name: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.issName}} </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"subjName\">\n    <th mat-header-cell *matHeaderCellDef> Subject name: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.subjName}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"serialNumber\">\n    <th mat-header-cell *matHeaderCellDef> Serial number: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.serialNumber}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"startDate\">\n    <th mat-header-cell *matHeaderCellDef> Start date: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.startDate}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"endDate\">\n    <th mat-header-cell *matHeaderCellDef> End date: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.endDate}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n<mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-client-home-page',\n  templateUrl: './client-home-page.component.html',\n  styleUrls: ['./client-home-page.component.css']\n})\nexport class ClientHomePageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>client-home-page works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport {Certificate} from \"../../models/certificate\";\nimport {MatTableDataSource} from \"@angular/material/table\";\nimport {Log} from \"../../models/log\";\nimport {LogService} from \"../../services/log.service\";\n\n@Component({\n  selector: 'app-log-info-list',\n  templateUrl: './log-info-list.component.html',\n  styleUrls: ['./log-info-list.component.css']\n})\nexport class LogInfoListComponent implements OnInit {\n\n  displayedColumns: string[] = ['eventId', 'timestamp', 'sourceName', 'logType', 'message'];\n  myResponse: Log[];\n  dataSource: MatTableDataSource<Log>;\n  constructor(private logService: LogService) { }\n\n  ngOnInit(): void {\n    this.logService.getAllLogs().subscribe(\n      data => {\n        this.myResponse = data;\n        console.log(data);\n        this.dataSource = new MatTableDataSource<Log>(this.myResponse);\n      },\n      error => {\n        console.log('Error occured', error);\n      }\n    );\n  }\n\n}\n","<table mat-table\n       [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort>\n\n  <ng-container matColumnDef=\"eventId\">\n    <th mat-header-cell *matHeaderCellDef> Id: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.eventId}} </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"timestamp\">\n    <th mat-header-cell *matHeaderCellDef> Time stamp: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.timestamp}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"sourceName\">\n    <th mat-header-cell *matHeaderCellDef> Source name: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.sourceName}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"logType\">\n    <th mat-header-cell *matHeaderCellDef> Log type: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.logType}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"message\">\n    <th mat-header-cell *matHeaderCellDef> Message: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.message}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n<mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport {AuthService} from '../../services/auth.service';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\nimport {AllowedRoutesService} from '../../services/allowed-routes.service';\r\nimport {LogModel} from \"../../models/logModel\";\r\nimport {LogType} from \"../../models/logType\";\r\nimport {LogService} from \"../../services/log.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-login-component',\r\n  templateUrl: './login-component.component.html',\r\n  styleUrls: ['./login-component.component.css']\r\n})\r\n\r\nexport class LoginComponentComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private allowedRoutes: AllowedRoutesService,\r\n    private snackBar: MatSnackBar,\r\n    private logService: LogService\r\n  ) {\r\n    this.form = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  login() {\r\n    const val = this.form.value;\r\n\r\n    if (val.email && val.password) {\r\n      this.authService.login(val.email, val.password).subscribe(\r\n        token => {\r\n          localStorage.setItem('token', token);\r\n          const logModel= new LogModel(LogType.INFO, val.email, 'Successfull login',2);\r\n          this.logService.addLog(logModel).subscribe();\r\n          this.router.navigate(['/']);\r\n          if(this.authService.isAdmin()){\r\n            this.router.navigate(['/admin/home']);\r\n          }else if(this.authService.isUser()){\r\n            this.router.navigate(['/client/home']);\r\n          }\r\n      //    this.allowedRoutes.updateRoutes();\r\n        },\r\n        response => {\r\n          try {\r\n            const errorResponse = JSON.parse(response.error);\r\n            let errorAlert = '';\r\n            errorResponse.errors.forEach(err => {\r\n              errorAlert += `${err.defaultMessage}\\n`;\r\n            });\r\n            this.snackBar.open(errorAlert, '', { duration: 2000 });\r\n          } catch (err) {\r\n            this.snackBar.open(response.error, '', { duration: 2000 });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnInit() {}\r\n}\r\n\r\n","<mat-card class=\"mat-elevation-z10\">\r\n  <mat-toolbar color=\"primary\">\r\n    <h2>Login</h2>\r\n  </mat-toolbar>\r\n  <form [formGroup]=\"form\" class=\"login-form\">\r\n    <mat-form-field class=\"form-field\">\r\n      <input\r\n        matInput\r\n        name=\"email\"\r\n        formControlName=\"email\"\r\n        placeholder=\"Email\"\r\n      />\r\n      <mat-error *ngIf=\"form.hasError('required', 'email')\">\r\n        Email is required\r\n      </mat-error>\r\n      <mat-error id='invalidMail' *ngIf=\"form.hasError('email', 'email')\">\r\n        Email is not valid\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <br />\r\n    <mat-form-field class=\"form-field\">\r\n      <input\r\n        matInput\r\n        name=\"password\"\r\n        formControlName=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n      />\r\n      <mat-error *ngIf=\"form.hasError('required', 'password')\">\r\n        Password is required\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <br />\r\n    <button\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      class=\"button button-primary\"\r\n      (click)=\"login()\"\r\n    >\r\n      Login\r\n    </button>\r\n  </form>\r\n</mat-card>\r\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {AuthService} from \"../../services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\n\n@Component({\n  selector: 'app-registration-admin',\n  templateUrl: './registration-admin.component.html',\n  styleUrls: ['./registration-admin.component.css']\n})\nexport class RegistrationAdminComponent implements OnInit {\n  registerForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private _snackBar: MatSnackBar\n  ) {\n    this.registerForm = new FormGroup(\n      {\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')\n        ]),\n      },\n    );\n  }\n\n  ngOnInit() {}\n\n  register() {\n    const formValue = this.registerForm.value;\n\n    if (this.registerForm.valid) {\n      this.authService\n        .registerAdmin(\n          formValue.email,\n          formValue.password\n        )\n        .subscribe(\n          response => {\n            this._snackBar.open(response, '', {\n              duration: 2000\n            });\n            this.router.navigate(['/login']);\n\n          },\n          response => {\n            try {\n              const errorResponse = JSON.parse(response.error);\n              this._snackBar.open(errorResponse.message, '', {\n                duration: 2000\n              });\n            } catch (err) {\n              alert(response.error);\n            }\n          }\n        );\n    }\n  }\n}\n","<mat-card class=\"mat-elevation-z10\">\n  <mat-toolbar color=\"primary\">\n    <h2>\n      Register\n    </h2>\n  </mat-toolbar>\n\n  <form [formGroup]=\"registerForm\" class=\"register-form\">\n\n    <mat-form-field>\n      <input name=\"email\" matInput placeholder=\"Email\" formControlName=\"email\" />\n      <mat-error *ngIf=\"registerForm.hasError('required', 'email')\">\n        Email is required\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('email', 'email')\">\n        Email is not valid\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        name=\"password\"\n        matInput\n        placeholder=\"Password\"\n        formControlName=\"password\"\n        type=\"password\"\n      />\n      <mat-error *ngIf=\"registerForm.hasError('required', 'password')\">\n        Password is required\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('minlength', 'password')\">\n        Password must be at least 6 characters long\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('pattern', 'password')\">\n        Password must contain at least 1 lowercase, 1 uppercase letter and 1 number\n      </mat-error>\n    </mat-form-field>\n\n\n\n\n    <button mat-raised-button color=\"primary\" (click)=\"register()\" [disabled]=\"!registerForm.valid\">\n      Register\n    </button>\n  </form>\n</mat-card>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {User} from '../../models/user';\nimport {Router} from '@angular/router';\nimport {UserService} from '../../services/user.service';\nimport {Role} from '../../models/role';\nimport {environment} from '../../../environments/environment';\nimport {HttpClient} from '@angular/common/http';\nimport {AuthService} from '../../services/auth.service';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n  registerForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private _snackBar: MatSnackBar\n  ) {\n    this.registerForm = new FormGroup(\n      {\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')\n        ]),\n      },\n    );\n  }\n\n  ngOnInit() {}\n\n  register() {\n    const formValue = this.registerForm.value;\n\n    if (this.registerForm.valid) {\n      this.authService\n        .register(\n          formValue.email,\n          formValue.password\n        )\n        .subscribe(\n          response => {\n            this._snackBar.open(response, '', {\n              duration: 2000\n            });\n            this.router.navigate(['/login']);\n\n          },\n          response => {\n            try {\n              const errorResponse = JSON.parse(response.error);\n              this._snackBar.open(errorResponse.message, '', {\n                duration: 2000\n              });\n            } catch (err) {\n              alert(response.error);\n            }\n          }\n        );\n    }\n  }\n}\n","<mat-card class=\"mat-elevation-z10\">\n  <mat-toolbar color=\"primary\">\n    <h2>\n      Register\n    </h2>\n  </mat-toolbar>\n\n  <form [formGroup]=\"registerForm\" class=\"register-form\">\n\n    <mat-form-field>\n      <input name=\"email\" matInput placeholder=\"Email\" formControlName=\"email\" />\n      <mat-error *ngIf=\"registerForm.hasError('required', 'email')\">\n        Email is required\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('email', 'email')\">\n        Email is not valid\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        name=\"password\"\n        matInput\n        placeholder=\"Password\"\n        formControlName=\"password\"\n        type=\"password\"\n      />\n      <mat-error *ngIf=\"registerForm.hasError('required', 'password')\">\n        Password is required\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('minlength', 'password')\">\n        Password must be at least 6 characters long\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('pattern', 'password')\">\n        Password must contain at least 1 lowercase, 1 uppercase letter and 1 number\n      </mat-error>\n    </mat-form-field>\n\n\n\n\n    <button mat-raised-button color=\"primary\" (click)=\"register()\" [disabled]=\"!registerForm.valid\">\n      Register\n    </button>\n  </form>\n</mat-card>\n","import { NgModule } from '@angular/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule { }","import {LogType} from './logType';\r\n\r\nexport class  LogModel {\r\n  logType: LogType;\r\n  sourceName: string;\r\n  message: string;\r\n  eventId: number;\r\n  constructor(logType: LogType, sourceName: string, message: string,eventId: number)\r\n  {\r\n    this.logType=logType;\r\n    this.sourceName=sourceName;\r\n    this.message=message;\r\n    this.eventId=eventId;\r\n  }\r\n}\r\n","export enum LogType{\r\n  DEBUG, INFO, CRITICAL, WARNING, ERROR\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport * as jwt_decode from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllowedRoutesService {\n\n  private routes = new BehaviorSubject([]);\n  currentRoutes = this.routes.asObservable();\n\n  constructor(private router: Router, private _snackBar: MatSnackBar) {\n    this.updateRoutes();\n  }\n\n  changeRoutes(newRoutes: Array<any>) {\n    this.routes.next(newRoutes);\n  }\n\n  updateRoutes() {\n    const token = localStorage.getItem('token');\n    const components = [{ path: 'event', label: 'Events' }];\n    if (!token) {\n      components.push({ path: 'login', label: 'Login' });\n      components.push({ path: 'register', label: 'Register' });\n\n      this.routes.next(components);\n      return;\n    }\n    const decodedToken = jwt_decode(token);\n    const currentTime = new Date().getTime() / 1000;\n    if (currentTime > decodedToken.exp) {\n      components.push({ path: 'login', label: 'Login' });\n      components.push({ path: 'register', label: 'Register' });\n      this.router.navigate(['/login']);\n      this._snackBar.open('Login first', '', { duration: 1000 });\n      return false;\n    }\n\n    decodedToken.roles.forEach(role => {\n      if (role.authority === 'ROLE_USER') {\n        components.push({\n          path: 'profile',\n          label: `User: ${decodedToken.sub}`\n        });\n      } else if (role.authority === 'ROLE_ADMIN') {\n        components.push({\n          path: 'add-event',\n          label: 'Add Event'\n        });\n        components.push({\n          path: 'locations',\n          label: 'Locations'\n        });\n        components.push({\n          path: 'add-location',\n          label: 'Add Location'\n        });\n        components.push({\n          path: 'profile',\n          label: `Admin: ${decodedToken.sub}`\n        });\n      } else {\n        components.push({ path: 'login', label: 'Login' });\n        components.push({ path: 'register', label: 'Register' });\n        localStorage.removeItem('token');\n        this.routes.next(components);\n        return;\n      }\n    });\n    this.routes.next(components);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../environments/environment';\nimport * as jwt_decode from 'jwt-decode';\nimport {Router} from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private http: HttpClient,private router: Router,) {}\n\n  login(email: string, password: string) {\n    return this.http.post(`${environment.baseUrl}/api/login`, { email: email, password: password }, { responseType: 'text' });\n  }\n\n  register(\n\n    email: string,\n    password: string\n  ) {\n    return this.http.post(\n      `${environment.baseUrl}/api/register`,\n      {\n        email: email,\n        password: password,\n      },\n      { responseType: 'text' }\n    );\n  }\n\n  registerAdmin(\n\n    email: string,\n    password: string\n  ) {\n    return this.http.post(\n      `${environment.baseUrl}/api/registerAdmin`,\n      {\n        email: email,\n        password: password,\n      },\n      { responseType: 'text' }\n    );\n  }\n  // profile() {\n  //   return this.http.get<UserProfile>(`${environment.apiUrl}/api/profile`);\n  // }\n  //\n  // updateProfile(user: UserProfile) {\n  //   console.log(user);\n  //   return this.http.put<UserProfile>(\n  //     `${environment.apiUrl}/api/updateProfile`,\n  //     { email: user.email, firstName: user.firstName, lastName: user.lastName }\n  //   );\n  // }\n  //\n  // changePassword(changePassword: ChangePassword) {\n  //   console.log(changePassword);\n  //   return this.http.put<UserProfile>(`${environment.apiUrl}/api/reset`, {\n  //     password1: changePassword.password1,\n  //     password2: changePassword.password2\n  //   });\n  // }\n\n  getEmail(){\n    const token = localStorage.getItem('token');\n    if(localStorage.getItem('token') === null || localStorage.getItem('token') === undefined){\n      return false;\n    }\n    const decodedToken = jwt_decode(token);\n    return decodedToken.sub;\n  }\n\n  isAdmin() {\n    let isAdmin = false;\n    const token = localStorage.getItem('token');\n      if(localStorage.getItem('token') === null || localStorage.getItem('token') === undefined){\n        return false;\n      }\n    const decodedToken = jwt_decode(token);\n    const currentTime = new Date().getTime() / 1000;\n    if (currentTime > decodedToken.exp) {\n      return isAdmin;\n    }\n    decodedToken.roles.forEach(role => {\n      if (role.authority === 'ROLE_ADMIN') {\n        isAdmin = true;\n      }\n    });\n    return isAdmin;\n  }\n\n  isUser() {\n    let isAdmin = false;\n    const token = localStorage.getItem('token');\n   // console.log(token);\n      if(localStorage.getItem('token') === null || localStorage.getItem('token') === undefined){\n        return false;\n      }\n    const decodedToken = jwt_decode(token);\n    const currentTime = new Date().getTime() / 1000;\n    if (currentTime > decodedToken.exp) {\n      return isAdmin;\n    }\n    decodedToken.roles.forEach(role => {\n      if (role.authority === 'ROLE_USER') {\n        isAdmin = true;\n      }\n    });\n    return isAdmin;\n  }\n\n  logout(){\n    const token = localStorage.getItem('token');\n      if(localStorage.getItem('token') === null || localStorage.getItem('token') === undefined){\n        return false;\n      }\n      localStorage.removeItem('token');\n      this.router.navigate(['/login']);\n      console.log('izlogovan');\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {CertificateDB} from '../models/certificateDB';\r\nimport {Observable} from 'rxjs';\r\nimport {Certificate} from '../models/certificate';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from './user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CertificateServiceService {\r\n\r\n  private URL: string;\r\n  constructor(private http: HttpClient, private userService: UserService) {\r\n    this.URL = environment.baseUrl + environment.certificate;\r\n  }\r\n\r\n  public getAllCertificates(): Observable<Certificate[]> {\r\n    return this.http.get<Array<Certificate>>(environment.baseUrl + '/api/certificate/allCertificates');\r\n  }\r\n\r\n  public revokeCertificate(certificate: Certificate) {\r\n    return this.http.post<Certificate>(environment.baseUrl + '/api/certificate/revoke', certificate);\r\n  }\r\n\r\n  public checkCertificateStatus(certificate: Certificate) {\r\n    return this.http.post<Certificate>(environment.baseUrl + '/api/certificate/check', certificate);\r\n  }\r\n\r\n  public getAllPossibleIssuers(): Observable<CertificateDB[]> {\r\n    return this.http.get<CertificateDB[]>( environment.baseUrl + '/api/certificate/allPossibleIssuers');\r\n  }\r\n\r\n  public downloadCertificate(certificate: Certificate) {\r\n    return this.http.post<Certificate>(environment.baseUrl + '/api/certificate/download', certificate);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {Certificate} from \"../models/certificate\";\nimport {environment} from \"../../environments/environment\";\nimport {Log} from \"../models/log\";\nimport {LogModel} from \"../models/logModel\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogService {\n\n  constructor(private http: HttpClient) { }\n\n  public getAllLogs(): Observable<Log[]> {\n    return this.http.get<Array<Log>>(environment.baseUrl + '/api/log/allLogs');\n  }\n\n  public addLog(log: LogModel) {\n    return this.http.post(`${environment.baseUrl}/api/log`, log, { responseType: 'text' });\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from '../models/user';\r\nimport { Role } from '../models/role';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\nimport {UserTokenState} from '../models/userTokenState';\r\nimport {LoginRequest} from '../models/loginRequest';\r\n\r\nexport const TOKEN='LoggedInUser';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class UserService{\r\n\r\n  accessToken = null;\r\n  request: UserTokenState;\r\n  loggedInUser: Observable<UserTokenState>;\r\n  loggedInUserSubject: BehaviorSubject<UserTokenState>;\r\n\r\n  constructor(private router: Router, private httpClient: HttpClient) {\r\n    // this.loggedInUserSubject = new BehaviorSubject<UserTokenState>(JSON.parse(localStorage.getItem('user')));\r\n    // this.loggedInUser = this.loggedInUserSubject.asObservable();\r\n  }\r\n\r\n  // login(loginRequest: LoginRequest) {\r\n  //   return this.httpClient.post('http://localhost:8081/api/auth/login', loginRequest).pipe(map((response: UserTokenState) => {\r\n  //     this.accessToken = response.accessToken;\r\n  //     localStorage.setItem('user', JSON.stringify(response));\r\n  //     this.loggedInUserSubject.next(response);\r\n  //   }));\r\n  // }\r\n  //\r\n  // getToken() {\r\n  //   return this.accessToken;\r\n  // }\r\n  //\r\n  // getLoggedInUser() {\r\n  //   return this.loggedInUserSubject.value;\r\n  // }\r\n  //\r\n  // isLoggedIn() {\r\n  //   return localStorage.getItem('user') != null;\r\n  // }\r\n  //\r\n  // logout() {\r\n  //   localStorage.removeItem('user');\r\n  //   this.accessToken = null;\r\n  //   this.router.navigate(['/']);\r\n  // }\r\n  //   urlUser = environment.baseUrl + environment.user;\r\n  //   users: Array<User>=new Array<User>();\r\n  //   user:User= new User('', '', Role.NONE);\r\n  //   u:User;\r\n  //   us:User;\r\n  //   constructor(private router: Router, private http: HttpClient) {\r\n  //     this.getAllUsers();\r\n  //\r\n  //     localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  //   }\r\n  //\r\n  //   public addUser(u: User){\r\n  //     if (this.getUser(u.username) === null) {\r\n  //       this.users.push(u);\r\n  //     }\r\n  //   }\r\n  //\r\n  //   public setLoggedUser(user: User) {\r\n  //     this.user = user;\r\n  //   }\r\n  //\r\n  //   public getLoggedUser() {\r\n  //     return this.user;\r\n  //   }\r\n  //\r\n  // public getUser(username: string) {\r\n  //   if ( this.users.length === 0) {\r\n  //     return null;\r\n  //   }\r\n  //   for (const u of this.users) {\r\n  //     if ( u.username === username) {\r\n  //       return u;\r\n  //     }\r\n  //   }\r\n  //   return null;\r\n  // }\r\n  //\r\n  //   public setToken(user){\r\n  //       this.user=user;\r\n  //       localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  //\r\n  //   }\r\n  //\r\n  //   public isLoggedIn() {\r\n  //       if(localStorage.getItem(TOKEN)!==null){\r\n  //         return localStorage.getItem(TOKEN);\r\n  //       }else {\r\n  //\r\n  //         return null;\r\n  //       }\r\n  //     }\r\n  //\r\n  //     public setUser(u: User) {\r\n  //\r\n  //       for (const p1 of this.users) {\r\n  //         if (p1.username === u.username) {\r\n  //           p1.password = u.password;\r\n  //           return;\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //\r\n  //   public logout(){\r\n  //     this.router.navigate(['']);\r\n  //     this.user =  new User('', '', Role.NONE);\r\n  //     localStorage.removeItem(TOKEN);\r\n  //     localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  //   }\r\n  //\r\n  //   public isNone() {\r\n  //     if (this.isLoggedIn()) {\r\n  //       return this.user.role === Role.NONE;\r\n  //     }\r\n  //   }\r\n  //\r\n  //   public isAdmin() {\r\n  //       if (this.isLoggedIn()) {\r\n  //         return this.user.role === Role.ADMIN;\r\n  //       }\r\n  //     }\r\n  //\r\n  // public isClient() {\r\n  //   if (this.isLoggedIn()) {\r\n  //     return this.user.role === Role.CLIENT;\r\n  //   }\r\n  // }\r\n  //     public getAllUsers(): Array<User> {\r\n  //       this.http.get(this.urlUser + '/all').subscribe((data: User[]) => {\r\n  //           for (const c of data) {\r\n  //               console.log(c);\r\n  //               this.u = new User(c.username, c.password, this.whichRole(c.role.toString()));\r\n  //               this.addUser(this.u);\r\n  //           }\r\n  //         },\r\n  //         error => {\r\n  //           console.log(error);\r\n  //         }\r\n  //       );\r\n  //       console.log(this.users);\r\n  //       return this.users;\r\n  //     }\r\n  //\r\n  //     public whichRole(role: string) {\r\n  //       if (role === 'ADMIN') {\r\n  //         return Role.ADMIN;\r\n  //       } else if(role ==='CLIENT') {\r\n  //         return Role.CLIENT}\r\n  //       else{\r\n  //           return null;\r\n  //         }\r\n  //       }\r\n  //\r\n  // public login(user) {\r\n  //   return this.http.post(environment.baseUrl + '/login', user, {responseType: 'text'});\r\n  // }\r\n\r\n  // public login(user): User {\r\n  //     us= new User('','',\r\n  //       );\r\n  //   this.http.get(environment.baseUrl + '/login', user).subscribe((data:User) => {\r\n  //\r\n  //     },\r\n  //     error => {\r\n  //       console.log(error);\r\n  //     }\r\n  //   );\r\n  //   return\r\n  // }\r\n\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'https://localhost:8443',\r\n  login: '/login',\r\n  admin:'/admin',\r\n  user:'/user',\r\n  certificate:'/certificate',\r\n  client:'/client'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}
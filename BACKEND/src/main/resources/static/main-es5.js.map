{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_helper/jwt.interceptor.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/add-certificate/add-certificate.component.ts","webpack:///src/app/components/add-certificate/add-certificate.component.html","webpack:///src/app/components/add-selfsigned/add-selfsigned.component.ts","webpack:///src/app/components/add-selfsigned/add-selfsigned.component.html","webpack:///src/app/components/admin-home-page/admin-home-page.component.ts","webpack:///src/app/components/admin-home-page/admin-home-page.component.html","webpack:///src/app/components/all-certificates/all-certificates.component.ts","webpack:///src/app/components/all-certificates/all-certificates.component.html","webpack:///src/app/components/client-all-certificates/client-all-certificates.component.ts","webpack:///src/app/components/client-all-certificates/client-all-certificates.component.html","webpack:///src/app/components/client-home-page/client-home-page.component.ts","webpack:///src/app/components/client-home-page/client-home-page.component.html","webpack:///src/app/components/log-info-list/log-info-list.component.ts","webpack:///src/app/components/log-info-list/log-info-list.component.html","webpack:///src/app/components/login-component/login-component.component.ts","webpack:///src/app/components/login-component/login-component.component.html","webpack:///src/app/components/registration-admin/registration-admin.component.ts","webpack:///src/app/components/registration-admin/registration-admin.component.html","webpack:///src/app/components/registration/registration.component.ts","webpack:///src/app/components/registration/registration.component.html","webpack:///src/app/material-module.ts","webpack:///src/app/models/logModel.ts","webpack:///src/app/models/logType.ts","webpack:///src/app/services/allowed-routes.service.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/certificate-service.service.ts","webpack:///src/app/services/log.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","JwtInterceptor","authenticationService","certificateService","request","next","token","localStorage","getItem","clone","setHeaders","handle","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","router","breakpointObserver","userService","authService","allowedRoutes","isHandset$","observe","Handset","pipe","result","matches","undefined","isAdmin","isUser","logout","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","AddCertificateComponent","http","certService","logService","model","startDate","endDate","serialNumber","name","surname","country","organization","organizationUnit","email","type","alias","issuerSerialNumber","getAllPossibleIssuers","subscribe","data","listOfPossibleIssuers","error","console","log","url","post","res","logModel","INFO","getEmail","addLog","navigate","alert","ERROR","generateCertificate","AddSelfsignedComponent","formBuilder","generateSelfSignedCertificate","AdminHomePageComponent","AllCertificatesComponent","displayedColumns","getAllCertificates","myResponse","dataSource","certificate","revokeCertificate","cert","checkCertificateStatus","downloadCertificate","ClientAllCertificatesComponent","ClientHomePageComponent","LogInfoListComponent","getAllLogs","LoginComponentComponent","fb","snackBar","form","group","required","password","val","value","login","setItem","response","errorResponse","JSON","parse","errorAlert","errors","forEach","err","defaultMessage","open","duration","RegistrationAdminComponent","_snackBar","registerForm","minLength","pattern","formValue","valid","registerAdmin","message","register","RegistrationComponent","DemoMaterialModule","LogModel","logType","sourceName","eventId","LogType","AllowedRoutesService","currentRoutes","asObservable","updateRoutes","newRoutes","components","label","push","decodedToken","currentTime","Date","getTime","exp","roles","role","authority","sub","removeItem","providedIn","AuthService","baseUrl","responseType","CertificateServiceService","URL","get","LogService","TOKEN","UserService","httpClient","accessToken","environment","production","admin","user","client","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AuthService} from '../services/auth.service';\r\nimport {CertificateServiceService} from '../services/certificate-service.service';\r\n\r\n// Add class for intercepting http request to add jwt token in header\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthService,\r\n              private certificateService: CertificateServiceService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          'X-Auth-Token': token\r\n        }\r\n      });\r\n    }\r\n    return next.handle(request);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponentComponent } from './components/login-component/login-component.component';\r\nimport { AdminHomePageComponent } from './components/admin-home-page/admin-home-page.component';\r\nimport {AddCertificateComponent} from './components/add-certificate/add-certificate.component';\r\nimport {AddSelfsignedComponent} from './components/add-selfsigned/add-selfsigned.component';\r\nimport {AllCertificatesComponent} from './components/all-certificates/all-certificates.component';\r\nimport {ClientHomePageComponent} from './components/client-home-page/client-home-page.component';\r\nimport {ClientAllCertificatesComponent} from \"./components/client-all-certificates/client-all-certificates.component\";\r\nimport {RegistrationComponent} from \"./components/registration/registration.component\";\r\nimport {LogInfoListComponent} from \"./components/log-info-list/log-info-list.component\";\r\nimport {RegistrationAdminComponent} from \"./components/registration-admin/registration-admin.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'login',\r\n        component: LoginComponentComponent,\r\n      },\r\n      {\r\n        path: 'admin/home',\r\n        component: AdminHomePageComponent\r\n      },\r\n  {\r\n      path: 'admin/add-certificate',\r\n    component: AddCertificateComponent\r\n  },\r\n  {\r\n    path: 'admin/add-selfsigned',\r\n    component: AddSelfsignedComponent\r\n  },\r\n  {\r\n    path: 'admin/all-certificates',\r\n    component: AllCertificatesComponent\r\n  },\r\n  {\r\n    path: 'client/home',\r\n    component: ClientHomePageComponent\r\n  },\r\n  {\r\n    path: 'client/all-certificates',\r\n    component: ClientAllCertificatesComponent\r\n  }\r\n  ,\r\n  {\r\n    path: 'registration',\r\n    component: RegistrationComponent\r\n  },\r\n  {\r\n    path:'admin/logs',\r\n    component: LogInfoListComponent\r\n  },\r\n  {\r\n    path: 'registrationAdmin',\r\n    component: RegistrationAdminComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n  })\r\n  export class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { UserService } from './services/user.service';\r\nimport {AuthService} from \"./services/auth.service\";\r\nimport {AllowedRoutesService} from \"./services/allowed-routes.service\";\r\nimport * as jwt_decode from 'jwt-decode';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private breakpointObserver: BreakpointObserver,\r\n    private userService: UserService,\r\n    private authService: AuthService,\r\n    private allowedRoutes: AllowedRoutesService\r\n    ) {\r\n  }\r\n\r\n    isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n      .pipe(\r\n        map((result) => result.matches),\r\n        shareReplay()\r\n      );\r\n\r\n      public isNone() {\r\n          if (localStorage.getItem('token') === null || localStorage.getItem('token') === undefined) {\r\n            return true;\r\n        }return false;\r\n      }\r\n\r\n      public isAdmin() {\r\n        return this.authService.isAdmin();\r\n      }\r\n      public isUser(){\r\n        return this.authService.isUser();\r\n      }\r\n      public onLogout() {\r\n        this.authService.logout();\r\n      }\r\n\r\n}\r\n","<mat-sidenav-container class=\"sidenav-container\">\r\n    <mat-sidenav #drawer class=\"sidenav\" fixedInViewport [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\r\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\" [opened]=\"(isHandset$ | async) === true\">\r\n      <mat-toolbar>Menu</mat-toolbar>\r\n      <mat-nav-list *ngIf=\"isNone()\">\r\n        <a mat-list-item routerLink=\"/login\">Login</a>\r\n        <a mat-list-item routerLink=\"/registration\">Registration for user</a>\r\n        <a mat-list-item routerLink=\"/registrationAdmin\">Registration for admin</a>\r\n      </mat-nav-list>\r\n\r\n        <mat-nav-list *ngIf=\"isAdmin()\">\r\n          <a mat-list-item routerLink=\"/admin/add-certificate\">Add Certificate</a>\r\n          <a mat-list-item routerLink=\"/admin/add-selfsigned\">Add SelfSigned Certificate</a>\r\n          <a mat-list-item routerLink=\"/admin/all-certificates\">All Certificates</a>\r\n          <a mat-list-item routerLink=\"/admin/logs\">All Logs</a>\r\n          <a mat-list-item (click)=\"onLogout()\">Log out</a>\r\n        </mat-nav-list>\r\n      <mat-nav-list *ngIf=\"isUser()\">\r\n        <a mat-list-item routerLink=\"/client/all-certificates\">All Certificates</a>\r\n        <a mat-list-item (click)=\"onLogout()\">Log out</a>\r\n      </mat-nav-list>\r\n    </mat-sidenav>\r\n    <mat-sidenav-content>\r\n      <mat-toolbar>\r\n        <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\">\r\n          <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\r\n        </button>\r\n        <span>P I K</span>\r\n<!--        <span class=\"example-spacer\"></span>-->\r\n<!--        <span flex></span>-->\r\n<!--        <button  mat-flat-button color=\"primary\" role=\"button\" routerLink=\"/login\">-->\r\n<!--          <mat-icon>login</mat-icon>-->\r\n<!--          Login-->\r\n<!--        </button>-->\r\n<!--        <button mat-flat-button color=\"primary\" role=\"button\" routerLink=\"/registration\">-->\r\n<!--          <mat-icon>registration</mat-icon>-->\r\n<!--          Registration-->\r\n<!--        </button>-->\r\n\r\n        <span></span>\r\n      </mat-toolbar>\r\n      <!-- Add Content Here -->\r\n      <router-outlet></router-outlet>\r\n    </mat-sidenav-content>\r\n  </mat-sidenav-container>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule }         from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponentComponent } from './components/login-component/login-component.component';\r\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DemoMaterialModule } from './material-module';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AdminHomePageComponent } from './components/admin-home-page/admin-home-page.component';\r\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\r\nimport { AddCertificateComponent } from './components/add-certificate/add-certificate.component';\r\nimport { AddSelfsignedComponent } from './components/add-selfsigned/add-selfsigned.component';\r\nimport { AllCertificatesComponent } from './components/all-certificates/all-certificates.component';\r\nimport { ClientHomePageComponent } from './components/client-home-page/client-home-page.component';\r\nimport { ClientAllCertificatesComponent } from './components/client-all-certificates/client-all-certificates.component';\r\nimport { RegistrationComponent } from './components/registration/registration.component';\r\nimport {AuthService} from \"./services/auth.service\";\r\nimport {CertificateServiceService} from \"./services/certificate-service.service\";\r\nimport {JwtInterceptor} from \"./_helper/jwt.interceptor\";\nimport { LogInfoListComponent } from './components/log-info-list/log-info-list.component';\nimport { RegistrationAdminComponent } from './components/registration-admin/registration-admin.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponentComponent,\r\n    AdminHomePageComponent,\r\n    AddCertificateComponent,\r\n    AddSelfsignedComponent,\r\n    AllCertificatesComponent,\r\n    ClientHomePageComponent,\r\n    ClientAllCertificatesComponent,\r\n    RegistrationComponent,\r\n    LogInfoListComponent,\r\n    RegistrationAdminComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    NoopAnimationsModule,\r\n    DemoMaterialModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [\r\n    AuthService,\r\n    CertificateServiceService,\r\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {CertificateModel} from '../../models/certificateModel';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {CertificateServiceService} from '../../services/certificate-service.service';\r\nimport {CertificateDB} from '../../models/certificateDB';\r\nimport {UserService} from '../../services/user.service';\r\nimport {LogModel} from \"../../models/logModel\";\r\nimport {LogType} from \"../../models/logType\";\r\nimport {AuthService} from \"../../services/auth.service\";\r\nimport {LogService} from \"../../services/log.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-add-certificate',\r\n  templateUrl: './add-certificate.component.html',\r\n  styleUrls: ['./add-certificate.component.css']\r\n})\r\nexport class AddCertificateComponent implements OnInit {\r\n\r\n  model: CertificateModel = {\r\n    startDate: '',\r\n    endDate: '',\r\n    serialNumber: '',\r\n    name: '',\r\n    surname: '',\r\n    country: '',\r\n    organization: '',\r\n    organizationUnit: '',\r\n    email: '',\r\n    type: '',\r\n    alias: '',\r\n    issuerSerialNumber: '',\r\n  };\r\n  listOfPossibleIssuers: CertificateDB [];\r\n  constructor(private http: HttpClient ,\r\n              private certService: CertificateServiceService,\r\n              private userService: UserService,\r\n              private authService: AuthService,\r\n              private logService: LogService,\r\n              private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.certService.getAllPossibleIssuers().subscribe(\r\n      data => {\r\n        this.listOfPossibleIssuers = data;\r\n      },\r\n      error => {\r\n        console.log('Error occured', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  generateCertificate(): void {\r\n    const url = 'https://localhost:8443/api/certificate/generate';\r\n    this.http.post(url, this.model).subscribe(\r\n      res => {\r\n        const logModel= new LogModel(LogType.INFO, this.authService.getEmail(), 'Certificate created',4);\r\n        this.logService.addLog(logModel).subscribe();\r\n        this.router.navigate(['/admin/home']);\r\n        alert('Uspesno');\r\n      },\r\n      error => {\r\n        const logModel= new LogModel(LogType.ERROR, this.authService.getEmail(), 'Error creating certificate',5);\r\n        this.logService.addLog(logModel).subscribe();\r\n        alert('Error');\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","\r\n  <div class=\"row\">\r\n    <div class=\"offset-3\"></div>\r\n    <div class=\"col-md-6\">\r\n      <form name=\"certificateForm\" #f=\"ngForm\" (ngSubmit)=\"generateCertificate()\" novalidate class=\"feedback-form\">\r\n\r\n        <div class=\"form-group\">\r\n          <b>Choose type:</b><br><br>\r\n\r\n          <input type=\"radio\" id=\"intermediate\" name=\"type\" [(ngModel)]=\"model.type\" value=\"INTERMEDIATE\">\r\n          <label for=\"intermediate\" style=\"padding-right:20px;\">Intermediate</label>\r\n          <input type=\"radio\" id=\"client\" name=\"type\" [(ngModel)]=\"model.type\" value=\"CLIENT\">\r\n          <label for=\"client\">Client</label>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <h4><b>Choose issuer:</b></h4>\r\n          <select class=\"form-control\" [(ngModel)]=\"model.issuerSerialNumber\" name=\"issuerSerialNumber\">\r\n            <option  *ngFor=\" let issuer of listOfPossibleIssuers \" value=\"{{issuer.serialNumber}}\">{{issuer.subjectCommonName}}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\" >\r\n          <h4><b>Client data</b></h4>\r\n          <div class=\"form-group\">\r\n            <label>Name:</label>\r\n            <input type=\"text\"\r\n                   placeholder=\"Name\"\r\n                   class=\"form-control\" name=\"name\"\r\n                   pattern=\"[A-Za-z]\"\r\n                   [(ngModel)]=\"model.name\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\" >\r\n            <label>Surname:</label>\r\n            <input type=\"text\" name=\"surname\"\r\n                   placeholder=\"Surname\"\r\n                   class=\"form-control\"\r\n                   [(ngModel)]=\"model.surname\"\r\n            />\r\n          </div>\r\n          <label>Country:</label>\r\n          <input type=\"text\" name=\"country\"\r\n                 placeholder=\"Country\"\r\n                 class=\"form-control\"\r\n                 [(ngModel)]=\"model.country\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group\" >\r\n          <label>Organization:</label>\r\n          <input type=\"text\" name=\"organization\"\r\n                 placeholder=\"Organization\"\r\n                 class=\"form-control\"\r\n                 [(ngModel)]=\"model.organization\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>Organization unit:</label>\r\n          <input type=\"text\"\r\n                 placeholder=\"Organization unit\"\r\n                 class=\"form-control\" name=\"organizationUnit\"\r\n                 [(ngModel)]=\"model.organizationUnit\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>E-mail:</label>\r\n          <input type=\"email\"\r\n                 placeholder=\"example@example.com\"\r\n                 class=\"form-control\" name=\"email\"\r\n                 pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\r\n                 [(ngModel)]=\"model.email\"\r\n\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"startDate\">Start date:</label>\r\n          <input type=\"date\" id=\"startDate\"\r\n                 class=\"form-control\"\r\n                 name=\"startDate\"\r\n                 placeholder=\"Start date\"\r\n                 [(ngModel)]=\"model.startDate\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"endDate\">End date:</label>\r\n          <input type=\"date\" id=\"endDate\"\r\n                 class=\"form-control\"\r\n                 name=\"endDate\"\r\n                 placeholder=\"End date\"\r\n                 [(ngModel)]=\"model.endDate\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"submit\" class=\"btn btn-danger\" value=\"Generate certificate\" />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {CertificateModel} from '../../models/certificateModel';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Router} from '@angular/router';\r\nimport {UserService} from '../../services/user.service';\r\nimport {LogModel} from '../../models/logModel';\r\nimport {LogType} from '../../models/logType';\r\nimport {LogService} from '../../services/log.service';\r\nimport {AuthService} from '../../services/auth.service';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-add-selfsigned',\r\n  templateUrl: './add-selfsigned.component.html',\r\n  styleUrls: ['./add-selfsigned.component.css']\r\n})\r\nexport class AddSelfsignedComponent implements OnInit {\r\n  registerForm: FormGroup;\r\n  model: CertificateModel = {\r\n    startDate: '',\r\n    endDate: '',\r\n    serialNumber: '',\r\n    name: '',\r\n    surname: '',\r\n    country: '',\r\n    organization: '',\r\n    organizationUnit: '',\r\n    email: '',\r\n    type: '',\r\n    alias: '',\r\n    issuerSerialNumber: ''\r\n  };\r\n\r\n  constructor(private http: HttpClient, private router: Router, private userService: UserService,\r\n              private logService: LogService, private authService: AuthService,\r\n              private formBuilder: FormBuilder,) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n  }\r\n\r\n\r\n  generateSelfSignedCertificate() {\r\n    const url = 'https://localhost:8443/api/certificate/selfSigned/generate';\r\n    this.http.post(url, this.model).subscribe(\r\n      res => {\r\n        const logModel= new LogModel(LogType.INFO, this.authService.getEmail(), 'Self-signed created',3);\r\n        this.logService.addLog(logModel).subscribe();\r\n        this.router.navigate(['/admin/home']);\r\n        alert('Uspesno');\r\n      },\r\n      error => {\r\n        alert('Error');\r\n        const logModel= new LogModel(LogType.INFO, this.authService.getEmail(), 'Error creating self-signed certificate',6);\r\n        this.logService.addLog(logModel).subscribe();\r\n        console.log('Error');\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"offset-3\"></div>\r\n  <div class=\"col-md-6\">\r\n    <form name=\"certificateForm\" #f=\"ngForm\" (ngSubmit)=\"generateSelfSignedCertificate()\" novalidate class=\"feedback-form\">\r\n\r\n      <div class=\"form-group\">\r\n        <h4><b>Client data:</b></h4>\r\n        <div class=\"form-group\">\r\n          <label>Name:</label>\r\n          <input type=\"text\"\r\n                 placeholder=\"Name\"\r\n                 class=\"form-control\" name=\"name\"\r\n                 [(ngModel)]=\"model.name\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>Surname:</label>\r\n          <input type=\"text\" name=\"surname\"\r\n                 placeholder=\"Surname\"\r\n                 class=\"form-control\"\r\n                 [(ngModel)]=\"model.surname\"\r\n          />\r\n        </div>\r\n        <label>Country:</label>\r\n        <input type=\"text\" name=\"country\"\r\n               placeholder=\"Country\"\r\n               class=\"form-control\"\r\n               [(ngModel)]=\"model.country\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Organization:</label>\r\n        <input type=\"text\" name=\"organization\"\r\n               placeholder=\"Organization\"\r\n               class=\"form-control\"\r\n               [(ngModel)]=\"model.organization\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Organization unit:</label>\r\n        <input type=\"text\"\r\n               placeholder=\"Organization unit\"\r\n               class=\"form-control\" name=\"organizationUnit\"\r\n               [(ngModel)]=\"model.organizationUnit\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>E-mail:</label>\r\n        <input type=\"email\"\r\n               placeholder=\"example@example.com\"\r\n               class=\"form-control\" name=\"email\"\r\n               [(ngModel)]=\"model.email\"\r\n\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"startDate\">Start date:</label>\r\n        <input type=\"date\" id=\"startDate\"\r\n               class=\"form-control\"\r\n               name=\"startDate\"\r\n               placeholder=\"Start date\"\r\n               [(ngModel)]=\"model.startDate\"/>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"endDate\">End date:</label>\r\n        <input type=\"date\" id=\"endDate\"\r\n               class=\"form-control\"\r\n               name=\"endDate\"\r\n               placeholder=\"End date\"\r\n               [(ngModel)]=\"model.endDate\"/>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <input type=\"submit\" class=\"btn btn-danger\" value=\"Generate certificate\" />\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-admin-home-page',\r\n  templateUrl: './admin-home-page.component.html',\r\n  styleUrls: ['./admin-home-page.component.css']\r\n})\r\nexport class AdminHomePageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>admin-home-page works!</p>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {CertificateServiceService} from '../../services/certificate-service.service';\r\nimport {Certificate} from '../../models/certificate';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'app-all-certificates',\r\n  templateUrl: './all-certificates.component.html',\r\n  styleUrls: ['./all-certificates.component.css']\r\n})\r\nexport class AllCertificatesComponent implements OnInit {\r\n\r\n  // tslint:disable-next-line:max-line-length\r\n  displayedColumns: string[] = ['issName', 'subjName', 'serialNumber', 'startDate', 'endDate', 'download', 'revoke','check'];\r\n  myResponse: Certificate[];\r\n  dataSource: MatTableDataSource<Certificate>;\r\n  constructor(private certService: CertificateServiceService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.certService.getAllCertificates().subscribe(\r\n      data => {\r\n        this.myResponse = data;\r\n        console.log(data);\r\n        this.dataSource = new MatTableDataSource<Certificate>(this.myResponse);\r\n      },\r\n      error => {\r\n        console.log('Error occured', error);\r\n      }\r\n    );\r\n  }\r\n  revoke(certificate: Certificate) {\r\n    this.certService.revokeCertificate(certificate).subscribe(\r\n      res => {\r\n        alert('Revoked');\r\n      },\r\n      error => {\r\n        alert('Error');\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  isRevoked(cert: Certificate): boolean {\r\n    this.certService.checkCertificateStatus(cert).subscribe(\r\n      res =>{\r\n        alert('Already revoked');\r\n        return true;\r\n      }, error => {\r\n        alert('Error revoke');\r\n        return false;\r\n      }\r\n    );\r\n    return false;\r\n  }\r\n\r\n\r\n  download(certificate: Certificate) {\r\n    this.certService.downloadCertificate(certificate).subscribe(\r\n      res => {\r\n        alert('Downloaded');\r\n      },\r\n      error => {\r\n        alert('Error');\r\n      }\r\n    );\r\n  }\r\n}\r\n","<table mat-table\r\n       [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort>\r\n\r\n  <ng-container matColumnDef=\"issName\">\r\n    <th mat-header-cell *matHeaderCellDef> Issuer name: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.issName}} </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"subjName\">\r\n    <th mat-header-cell *matHeaderCellDef> Subject name: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.subjName}} </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"serialNumber\">\r\n    <th mat-header-cell *matHeaderCellDef> Serial number: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.serialNumber}} </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"startDate\">\r\n    <th mat-header-cell *matHeaderCellDef> Start date: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.startDate}} </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"endDate\">\r\n    <th mat-header-cell *matHeaderCellDef> End date: </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.endDate}} </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"download\">\r\n    <th mat-header-cell *matHeaderCellDef> Download </th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"download(element)\">Download it</button>\r\n    </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"revoke\">\r\n    <th mat-header-cell *matHeaderCellDef> Revoke </th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"revoke(element)\">Revoke it</button>\r\n    </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"check\">\r\n    <th mat-header-cell *matHeaderCellDef>Check </th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"isRevoked(element)\">Revoke it</button>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n<mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n\r\n","import { Component, OnInit } from '@angular/core';\nimport {MatTableDataSource} from \"@angular/material/table\";\nimport {Certificate} from \"../../models/certificate\";\nimport {CertificateServiceService} from \"../../services/certificate-service.service\";\n\n@Component({\n  selector: 'app-client-all-certificates',\n  templateUrl: './client-all-certificates.component.html',\n  styleUrls: ['./client-all-certificates.component.css']\n})\nexport class ClientAllCertificatesComponent implements OnInit {\n\n  displayedColumns: string[] = ['issName', 'subjName', 'serialNumber', 'startDate', 'endDate'];\n  myResponse: Certificate[];\n  dataSource: MatTableDataSource<Certificate>;\n  constructor(private certService: CertificateServiceService) { }\n\n  ngOnInit(): void {\n    this.certService.getAllCertificates().subscribe(\n      data => {\n        this.myResponse = data;\n        console.log(data);\n        this.dataSource = new MatTableDataSource<Certificate>(this.myResponse);\n      },\n      error => {\n        console.log('Error occured', error);\n      }\n    );\n  }\n}\n","<table mat-table\n       [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort>\n\n  <ng-container matColumnDef=\"issName\">\n    <th mat-header-cell *matHeaderCellDef> Issuer name: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.issName}} </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"subjName\">\n    <th mat-header-cell *matHeaderCellDef> Subject name: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.subjName}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"serialNumber\">\n    <th mat-header-cell *matHeaderCellDef> Serial number: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.serialNumber}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"startDate\">\n    <th mat-header-cell *matHeaderCellDef> Start date: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.startDate}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"endDate\">\n    <th mat-header-cell *matHeaderCellDef> End date: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.endDate}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n<mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-client-home-page',\n  templateUrl: './client-home-page.component.html',\n  styleUrls: ['./client-home-page.component.css']\n})\nexport class ClientHomePageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>client-home-page works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport {Certificate} from \"../../models/certificate\";\nimport {MatTableDataSource} from \"@angular/material/table\";\nimport {Log} from \"../../models/log\";\nimport {LogService} from \"../../services/log.service\";\n\n@Component({\n  selector: 'app-log-info-list',\n  templateUrl: './log-info-list.component.html',\n  styleUrls: ['./log-info-list.component.css']\n})\nexport class LogInfoListComponent implements OnInit {\n\n  displayedColumns: string[] = ['eventId', 'timestamp', 'sourceName', 'logType', 'message'];\n  myResponse: Log[];\n  dataSource: MatTableDataSource<Log>;\n  constructor(private logService: LogService) { }\n\n  ngOnInit(): void {\n    this.logService.getAllLogs().subscribe(\n      data => {\n        this.myResponse = data;\n        console.log(data);\n        this.dataSource = new MatTableDataSource<Log>(this.myResponse);\n      },\n      error => {\n        console.log('Error occured', error);\n      }\n    );\n  }\n\n}\n","<table mat-table\n       [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort>\n\n  <ng-container matColumnDef=\"eventId\">\n    <th mat-header-cell *matHeaderCellDef> Id: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.eventId}} </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"timestamp\">\n    <th mat-header-cell *matHeaderCellDef> Time stamp: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.timestamp}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"sourceName\">\n    <th mat-header-cell *matHeaderCellDef> Source name: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.sourceName}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"logType\">\n    <th mat-header-cell *matHeaderCellDef> Log type: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.logType}} </td>\n  </ng-container>\n  <ng-container matColumnDef=\"message\">\n    <th mat-header-cell *matHeaderCellDef> Message: </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.message}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n<mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport {AuthService} from '../../services/auth.service';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\nimport {AllowedRoutesService} from '../../services/allowed-routes.service';\r\nimport {LogModel} from \"../../models/logModel\";\r\nimport {LogType} from \"../../models/logType\";\r\nimport {LogService} from \"../../services/log.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-login-component',\r\n  templateUrl: './login-component.component.html',\r\n  styleUrls: ['./login-component.component.css']\r\n})\r\n\r\nexport class LoginComponentComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private allowedRoutes: AllowedRoutesService,\r\n    private snackBar: MatSnackBar,\r\n    private logService: LogService\r\n  ) {\r\n    this.form = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  login() {\r\n    const val = this.form.value;\r\n\r\n    if (val.email && val.password) {\r\n      this.authService.login(val.email, val.password).subscribe(\r\n        token => {\r\n          localStorage.setItem('token', token);\r\n          const logModel= new LogModel(LogType.INFO, val.email, 'Successfull login',2);\r\n          this.logService.addLog(logModel).subscribe();\r\n          this.router.navigate(['/']);\r\n          if(this.authService.isAdmin()){\r\n            this.router.navigate(['/admin/home']);\r\n          }else if(this.authService.isUser()){\r\n            this.router.navigate(['/client/home']);\r\n          }\r\n      //    this.allowedRoutes.updateRoutes();\r\n        },\r\n        response => {\r\n          try {\r\n            const errorResponse = JSON.parse(response.error);\r\n            let errorAlert = '';\r\n            errorResponse.errors.forEach(err => {\r\n              errorAlert += `${err.defaultMessage}\\n`;\r\n            });\r\n            this.snackBar.open(errorAlert, '', { duration: 2000 });\r\n          } catch (err) {\r\n            this.snackBar.open(response.error, '', { duration: 2000 });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnInit() {}\r\n}\r\n\r\n","<mat-card class=\"mat-elevation-z10\">\r\n  <mat-toolbar color=\"primary\">\r\n    <h2>Login</h2>\r\n  </mat-toolbar>\r\n  <form [formGroup]=\"form\" class=\"login-form\">\r\n    <mat-form-field class=\"form-field\">\r\n      <input\r\n        matInput\r\n        name=\"email\"\r\n        formControlName=\"email\"\r\n        placeholder=\"Email\"\r\n      />\r\n      <mat-error *ngIf=\"form.hasError('required', 'email')\">\r\n        Email is required\r\n      </mat-error>\r\n      <mat-error id='invalidMail' *ngIf=\"form.hasError('email', 'email')\">\r\n        Email is not valid\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <br />\r\n    <mat-form-field class=\"form-field\">\r\n      <input\r\n        matInput\r\n        name=\"password\"\r\n        formControlName=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n      />\r\n      <mat-error *ngIf=\"form.hasError('required', 'password')\">\r\n        Password is required\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <br />\r\n    <button\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      class=\"button button-primary\"\r\n      (click)=\"login()\"\r\n    >\r\n      Login\r\n    </button>\r\n  </form>\r\n</mat-card>\r\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {AuthService} from \"../../services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\n\n@Component({\n  selector: 'app-registration-admin',\n  templateUrl: './registration-admin.component.html',\n  styleUrls: ['./registration-admin.component.css']\n})\nexport class RegistrationAdminComponent implements OnInit {\n  registerForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private _snackBar: MatSnackBar\n  ) {\n    this.registerForm = new FormGroup(\n      {\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')\n        ]),\n      },\n    );\n  }\n\n  ngOnInit() {}\n\n  register() {\n    const formValue = this.registerForm.value;\n\n    if (this.registerForm.valid) {\n      this.authService\n        .registerAdmin(\n          formValue.email,\n          formValue.password\n        )\n        .subscribe(\n          response => {\n            this._snackBar.open(response, '', {\n              duration: 2000\n            });\n            this.router.navigate(['/login']);\n\n          },\n          response => {\n            try {\n              const errorResponse = JSON.parse(response.error);\n              this._snackBar.open(errorResponse.message, '', {\n                duration: 2000\n              });\n            } catch (err) {\n              alert(response.error);\n            }\n          }\n        );\n    }\n  }\n}\n","<mat-card class=\"mat-elevation-z10\">\n  <mat-toolbar color=\"primary\">\n    <h2>\n      Register\n    </h2>\n  </mat-toolbar>\n\n  <form [formGroup]=\"registerForm\" class=\"register-form\">\n\n    <mat-form-field>\n      <input name=\"email\" matInput placeholder=\"Email\" formControlName=\"email\" />\n      <mat-error *ngIf=\"registerForm.hasError('required', 'email')\">\n        Email is required\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('email', 'email')\">\n        Email is not valid\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        name=\"password\"\n        matInput\n        placeholder=\"Password\"\n        formControlName=\"password\"\n        type=\"password\"\n      />\n      <mat-error *ngIf=\"registerForm.hasError('required', 'password')\">\n        Password is required\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('minlength', 'password')\">\n        Password must be at least 6 characters long\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('pattern', 'password')\">\n        Password must contain at least 1 lowercase, 1 uppercase letter and 1 number\n      </mat-error>\n    </mat-form-field>\n\n\n\n\n    <button mat-raised-button color=\"primary\" (click)=\"register()\" [disabled]=\"!registerForm.valid\">\n      Register\n    </button>\n  </form>\n</mat-card>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {User} from '../../models/user';\nimport {Router} from '@angular/router';\nimport {UserService} from '../../services/user.service';\nimport {Role} from '../../models/role';\nimport {environment} from '../../../environments/environment';\nimport {HttpClient} from '@angular/common/http';\nimport {AuthService} from '../../services/auth.service';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n  registerForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private _snackBar: MatSnackBar\n  ) {\n    this.registerForm = new FormGroup(\n      {\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')\n        ]),\n      },\n    );\n  }\n\n  ngOnInit() {}\n\n  register() {\n    const formValue = this.registerForm.value;\n\n    if (this.registerForm.valid) {\n      this.authService\n        .register(\n          formValue.email,\n          formValue.password\n        )\n        .subscribe(\n          response => {\n            this._snackBar.open(response, '', {\n              duration: 2000\n            });\n            this.router.navigate(['/login']);\n\n          },\n          response => {\n            try {\n              const errorResponse = JSON.parse(response.error);\n              this._snackBar.open(errorResponse.message, '', {\n                duration: 2000\n              });\n            } catch (err) {\n              alert(response.error);\n            }\n          }\n        );\n    }\n  }\n}\n","<mat-card class=\"mat-elevation-z10\">\n  <mat-toolbar color=\"primary\">\n    <h2>\n      Register\n    </h2>\n  </mat-toolbar>\n\n  <form [formGroup]=\"registerForm\" class=\"register-form\">\n\n    <mat-form-field>\n      <input name=\"email\" matInput placeholder=\"Email\" formControlName=\"email\" />\n      <mat-error *ngIf=\"registerForm.hasError('required', 'email')\">\n        Email is required\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('email', 'email')\">\n        Email is not valid\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        name=\"password\"\n        matInput\n        placeholder=\"Password\"\n        formControlName=\"password\"\n        type=\"password\"\n      />\n      <mat-error *ngIf=\"registerForm.hasError('required', 'password')\">\n        Password is required\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('minlength', 'password')\">\n        Password must be at least 6 characters long\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.hasError('pattern', 'password')\">\n        Password must contain at least 1 lowercase, 1 uppercase letter and 1 number\n      </mat-error>\n    </mat-form-field>\n\n\n\n\n    <button mat-raised-button color=\"primary\" (click)=\"register()\" [disabled]=\"!registerForm.valid\">\n      Register\n    </button>\n  </form>\n</mat-card>\n","import { NgModule } from '@angular/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule { }","import {LogType} from './logType';\r\n\r\nexport class  LogModel {\r\n  logType: LogType;\r\n  sourceName: string;\r\n  message: string;\r\n  eventId: number;\r\n  constructor(logType: LogType, sourceName: string, message: string,eventId: number)\r\n  {\r\n    this.logType=logType;\r\n    this.sourceName=sourceName;\r\n    this.message=message;\r\n    this.eventId=eventId;\r\n  }\r\n}\r\n","export enum LogType{\r\n  DEBUG, INFO, CRITICAL, WARNING, ERROR\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport * as jwt_decode from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllowedRoutesService {\n\n  private routes = new BehaviorSubject([]);\n  currentRoutes = this.routes.asObservable();\n\n  constructor(private router: Router, private _snackBar: MatSnackBar) {\n    this.updateRoutes();\n  }\n\n  changeRoutes(newRoutes: Array<any>) {\n    this.routes.next(newRoutes);\n  }\n\n  updateRoutes() {\n    const token = localStorage.getItem('token');\n    const components = [{ path: 'event', label: 'Events' }];\n    if (!token) {\n      components.push({ path: 'login', label: 'Login' });\n      components.push({ path: 'register', label: 'Register' });\n\n      this.routes.next(components);\n      return;\n    }\n    const decodedToken = jwt_decode(token);\n    const currentTime = new Date().getTime() / 1000;\n    if (currentTime > decodedToken.exp) {\n      components.push({ path: 'login', label: 'Login' });\n      components.push({ path: 'register', label: 'Register' });\n      this.router.navigate(['/login']);\n      this._snackBar.open('Login first', '', { duration: 1000 });\n      return false;\n    }\n\n    decodedToken.roles.forEach(role => {\n      if (role.authority === 'ROLE_USER') {\n        components.push({\n          path: 'profile',\n          label: `User: ${decodedToken.sub}`\n        });\n      } else if (role.authority === 'ROLE_ADMIN') {\n        components.push({\n          path: 'add-event',\n          label: 'Add Event'\n        });\n        components.push({\n          path: 'locations',\n          label: 'Locations'\n        });\n        components.push({\n          path: 'add-location',\n          label: 'Add Location'\n        });\n        components.push({\n          path: 'profile',\n          label: `Admin: ${decodedToken.sub}`\n        });\n      } else {\n        components.push({ path: 'login', label: 'Login' });\n        components.push({ path: 'register', label: 'Register' });\n        localStorage.removeItem('token');\n        this.routes.next(components);\n        return;\n      }\n    });\n    this.routes.next(components);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../environments/environment';\nimport * as jwt_decode from 'jwt-decode';\nimport {Router} from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private http: HttpClient,private router: Router,) {}\n\n  login(email: string, password: string) {\n    return this.http.post(`${environment.baseUrl}/api/login`, { email: email, password: password }, { responseType: 'text' });\n  }\n\n  register(\n\n    email: string,\n    password: string\n  ) {\n    return this.http.post(\n      `${environment.baseUrl}/api/register`,\n      {\n        email: email,\n        password: password,\n      },\n      { responseType: 'text' }\n    );\n  }\n\n  registerAdmin(\n\n    email: string,\n    password: string\n  ) {\n    return this.http.post(\n      `${environment.baseUrl}/api/registerAdmin`,\n      {\n        email: email,\n        password: password,\n      },\n      { responseType: 'text' }\n    );\n  }\n  // profile() {\n  //   return this.http.get<UserProfile>(`${environment.apiUrl}/api/profile`);\n  // }\n  //\n  // updateProfile(user: UserProfile) {\n  //   console.log(user);\n  //   return this.http.put<UserProfile>(\n  //     `${environment.apiUrl}/api/updateProfile`,\n  //     { email: user.email, firstName: user.firstName, lastName: user.lastName }\n  //   );\n  // }\n  //\n  // changePassword(changePassword: ChangePassword) {\n  //   console.log(changePassword);\n  //   return this.http.put<UserProfile>(`${environment.apiUrl}/api/reset`, {\n  //     password1: changePassword.password1,\n  //     password2: changePassword.password2\n  //   });\n  // }\n\n  getEmail(){\n    const token = localStorage.getItem('token');\n    if(localStorage.getItem('token') === null || localStorage.getItem('token') === undefined){\n      return false;\n    }\n    const decodedToken = jwt_decode(token);\n    return decodedToken.sub;\n  }\n\n  isAdmin() {\n    let isAdmin = false;\n    const token = localStorage.getItem('token');\n      if(localStorage.getItem('token') === null || localStorage.getItem('token') === undefined){\n        return false;\n      }\n    const decodedToken = jwt_decode(token);\n    const currentTime = new Date().getTime() / 1000;\n    if (currentTime > decodedToken.exp) {\n      return isAdmin;\n    }\n    decodedToken.roles.forEach(role => {\n      if (role.authority === 'ROLE_ADMIN') {\n        isAdmin = true;\n      }\n    });\n    return isAdmin;\n  }\n\n  isUser() {\n    let isAdmin = false;\n    const token = localStorage.getItem('token');\n   // console.log(token);\n      if(localStorage.getItem('token') === null || localStorage.getItem('token') === undefined){\n        return false;\n      }\n    const decodedToken = jwt_decode(token);\n    const currentTime = new Date().getTime() / 1000;\n    if (currentTime > decodedToken.exp) {\n      return isAdmin;\n    }\n    decodedToken.roles.forEach(role => {\n      if (role.authority === 'ROLE_USER') {\n        isAdmin = true;\n      }\n    });\n    return isAdmin;\n  }\n\n  logout(){\n    const token = localStorage.getItem('token');\n      if(localStorage.getItem('token') === null || localStorage.getItem('token') === undefined){\n        return false;\n      }\n      localStorage.removeItem('token');\n      this.router.navigate(['/login']);\n      console.log('izlogovan');\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {CertificateDB} from '../models/certificateDB';\r\nimport {Observable} from 'rxjs';\r\nimport {Certificate} from '../models/certificate';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from './user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CertificateServiceService {\r\n\r\n  private URL: string;\r\n  constructor(private http: HttpClient, private userService: UserService) {\r\n    this.URL = environment.baseUrl + environment.certificate;\r\n  }\r\n\r\n  public getAllCertificates(): Observable<Certificate[]> {\r\n    return this.http.get<Array<Certificate>>(environment.baseUrl + '/api/certificate/allCertificates');\r\n  }\r\n\r\n  public revokeCertificate(certificate: Certificate) {\r\n    return this.http.post<Certificate>(environment.baseUrl + '/api/certificate/revoke', certificate);\r\n  }\r\n\r\n  public checkCertificateStatus(certificate: Certificate) {\r\n    return this.http.post<Certificate>(environment.baseUrl + '/api/certificate/check', certificate);\r\n  }\r\n\r\n  public getAllPossibleIssuers(): Observable<CertificateDB[]> {\r\n    return this.http.get<CertificateDB[]>( environment.baseUrl + '/api/certificate/allPossibleIssuers');\r\n  }\r\n\r\n  public downloadCertificate(certificate: Certificate) {\r\n    return this.http.post<Certificate>(environment.baseUrl + '/api/certificate/download', certificate);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {Certificate} from \"../models/certificate\";\nimport {environment} from \"../../environments/environment\";\nimport {Log} from \"../models/log\";\nimport {LogModel} from \"../models/logModel\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogService {\n\n  constructor(private http: HttpClient) { }\n\n  public getAllLogs(): Observable<Log[]> {\n    return this.http.get<Array<Log>>(environment.baseUrl + '/api/log/allLogs');\n  }\n\n  public addLog(log: LogModel) {\n    return this.http.post(`${environment.baseUrl}/api/log`, log, { responseType: 'text' });\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from '../models/user';\r\nimport { Role } from '../models/role';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\nimport {UserTokenState} from '../models/userTokenState';\r\nimport {LoginRequest} from '../models/loginRequest';\r\n\r\nexport const TOKEN='LoggedInUser';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class UserService{\r\n\r\n  accessToken = null;\r\n  request: UserTokenState;\r\n  loggedInUser: Observable<UserTokenState>;\r\n  loggedInUserSubject: BehaviorSubject<UserTokenState>;\r\n\r\n  constructor(private router: Router, private httpClient: HttpClient) {\r\n    // this.loggedInUserSubject = new BehaviorSubject<UserTokenState>(JSON.parse(localStorage.getItem('user')));\r\n    // this.loggedInUser = this.loggedInUserSubject.asObservable();\r\n  }\r\n\r\n  // login(loginRequest: LoginRequest) {\r\n  //   return this.httpClient.post('http://localhost:8081/api/auth/login', loginRequest).pipe(map((response: UserTokenState) => {\r\n  //     this.accessToken = response.accessToken;\r\n  //     localStorage.setItem('user', JSON.stringify(response));\r\n  //     this.loggedInUserSubject.next(response);\r\n  //   }));\r\n  // }\r\n  //\r\n  // getToken() {\r\n  //   return this.accessToken;\r\n  // }\r\n  //\r\n  // getLoggedInUser() {\r\n  //   return this.loggedInUserSubject.value;\r\n  // }\r\n  //\r\n  // isLoggedIn() {\r\n  //   return localStorage.getItem('user') != null;\r\n  // }\r\n  //\r\n  // logout() {\r\n  //   localStorage.removeItem('user');\r\n  //   this.accessToken = null;\r\n  //   this.router.navigate(['/']);\r\n  // }\r\n  //   urlUser = environment.baseUrl + environment.user;\r\n  //   users: Array<User>=new Array<User>();\r\n  //   user:User= new User('', '', Role.NONE);\r\n  //   u:User;\r\n  //   us:User;\r\n  //   constructor(private router: Router, private http: HttpClient) {\r\n  //     this.getAllUsers();\r\n  //\r\n  //     localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  //   }\r\n  //\r\n  //   public addUser(u: User){\r\n  //     if (this.getUser(u.username) === null) {\r\n  //       this.users.push(u);\r\n  //     }\r\n  //   }\r\n  //\r\n  //   public setLoggedUser(user: User) {\r\n  //     this.user = user;\r\n  //   }\r\n  //\r\n  //   public getLoggedUser() {\r\n  //     return this.user;\r\n  //   }\r\n  //\r\n  // public getUser(username: string) {\r\n  //   if ( this.users.length === 0) {\r\n  //     return null;\r\n  //   }\r\n  //   for (const u of this.users) {\r\n  //     if ( u.username === username) {\r\n  //       return u;\r\n  //     }\r\n  //   }\r\n  //   return null;\r\n  // }\r\n  //\r\n  //   public setToken(user){\r\n  //       this.user=user;\r\n  //       localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  //\r\n  //   }\r\n  //\r\n  //   public isLoggedIn() {\r\n  //       if(localStorage.getItem(TOKEN)!==null){\r\n  //         return localStorage.getItem(TOKEN);\r\n  //       }else {\r\n  //\r\n  //         return null;\r\n  //       }\r\n  //     }\r\n  //\r\n  //     public setUser(u: User) {\r\n  //\r\n  //       for (const p1 of this.users) {\r\n  //         if (p1.username === u.username) {\r\n  //           p1.password = u.password;\r\n  //           return;\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //\r\n  //   public logout(){\r\n  //     this.router.navigate(['']);\r\n  //     this.user =  new User('', '', Role.NONE);\r\n  //     localStorage.removeItem(TOKEN);\r\n  //     localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  //   }\r\n  //\r\n  //   public isNone() {\r\n  //     if (this.isLoggedIn()) {\r\n  //       return this.user.role === Role.NONE;\r\n  //     }\r\n  //   }\r\n  //\r\n  //   public isAdmin() {\r\n  //       if (this.isLoggedIn()) {\r\n  //         return this.user.role === Role.ADMIN;\r\n  //       }\r\n  //     }\r\n  //\r\n  // public isClient() {\r\n  //   if (this.isLoggedIn()) {\r\n  //     return this.user.role === Role.CLIENT;\r\n  //   }\r\n  // }\r\n  //     public getAllUsers(): Array<User> {\r\n  //       this.http.get(this.urlUser + '/all').subscribe((data: User[]) => {\r\n  //           for (const c of data) {\r\n  //               console.log(c);\r\n  //               this.u = new User(c.username, c.password, this.whichRole(c.role.toString()));\r\n  //               this.addUser(this.u);\r\n  //           }\r\n  //         },\r\n  //         error => {\r\n  //           console.log(error);\r\n  //         }\r\n  //       );\r\n  //       console.log(this.users);\r\n  //       return this.users;\r\n  //     }\r\n  //\r\n  //     public whichRole(role: string) {\r\n  //       if (role === 'ADMIN') {\r\n  //         return Role.ADMIN;\r\n  //       } else if(role ==='CLIENT') {\r\n  //         return Role.CLIENT}\r\n  //       else{\r\n  //           return null;\r\n  //         }\r\n  //       }\r\n  //\r\n  // public login(user) {\r\n  //   return this.http.post(environment.baseUrl + '/login', user, {responseType: 'text'});\r\n  // }\r\n\r\n  // public login(user): User {\r\n  //     us= new User('','',\r\n  //       );\r\n  //   this.http.get(environment.baseUrl + '/login', user).subscribe((data:User) => {\r\n  //\r\n  //     },\r\n  //     error => {\r\n  //       console.log(error);\r\n  //     }\r\n  //   );\r\n  //   return\r\n  // }\r\n\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'https://localhost:8443',\r\n  login: '/login',\r\n  admin:'/admin',\r\n  user:'/user',\r\n  certificate:'/certificate',\r\n  client:'/client'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}